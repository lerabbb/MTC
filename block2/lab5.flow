import lingo/pegcode/driver;
import math/math;
import material/material;
import mtk_labs/block2/simplifier;
import mtk_labs/block2/exps;

/*Exp ::= NegD, NegI, Double, Int, Var, Pow, Div, Mul, Sum, Sub;
        Mul : (e1 : Exp, e2 : Exp);
        Sum : (e1 : Exp, e2 : Exp);
        Int : (i : int);
        Var : (s : string);

        Pow : (e1 : Exp, e2 : Exp);
        Div : (e1 : Exp, e2 : Exp);
        Sub : (e1 : Exp, e2 : Exp);
        Double : (d : double);
        NegD : (nd : double);
        NegI : (ni : int);*/
        

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();
lingoGrammar(){
    onlyOnce(lingoGrammarOp, \ -> compilePegGrammar("#include mtk_labs/block2/grammar.lingo"));
}

strToAst(text : string) -> flow {
    parsic(lingoGrammar(), text, defaultPegActions)
}

astToStr(tree : flow) -> string{
    switch(tree : Exp){
        Sum(e1, e2): "(" + astToStr(e1) + "+" + astToStr(e2) + ")";
        Mul(e1, e2): "(" + astToStr(e1) + "*" + astToStr(e2) + ")";
        Int(i): i2s(i);
        Var(s): s;

        Pow(e1, e2): "(" + astToStr(e1) + "^" + astToStr(e2) + ")";
        Div(e1, e2): "(" + astToStr(e1) + "/" + astToStr(e2) + ")";
        Sub(e1, e2): "(" + astToStr(e1) + "-" + astToStr(e2) + ")";
        Double(d): d2s(d);
        NegD(nd): d2s(nd);
        NegI(ni): i2s(ni);

        Sin(e): "(sin(" + astToStr(e) + "))";
        Cos(e): "(cos(" + astToStr(e) + "))";
        Ln(e): "(ln(" + astToStr(e) + "))";
        Tg(e): "(tg(" + astToStr(e) + "))";
        Ctg(e): "(ctg(" + astToStr(e) + "))";
    }
}

evaluate(tree : flow) -> double{
    switch(tree : Exp){
        Sum(e1, e2): evaluate(e1) + evaluate(e2);
        Mul(e1, e2): evaluate(e1) * evaluate(e2);
        Int(i): i2d(i);
        Var(s): getValueForVar(s);

        Div(e1, e2): evaluate(e1) / evaluate(e2);
        Pow(e1, e2): dpow(evaluate(e1), evaluate(e2)); 
        Sub(e1, e2): evaluate(e1) - evaluate(e2); 
        Double(d): d;
        NegD(nd): nd;
        NegI(ni): i2d(ni);

        Sin(e): sin(evaluate(e));
        Cos(e): cos(evaluate(e));
        Ln(e): log(evaluate(e));
        Tg(e): tan(evaluate(e));
        Ctg(e): cot(evaluate(e));
    }
}

getValueForVar(var : string) -> double{
    print("ENTER VALUE FOR " + var + ": ");
    val = readUntil("\n");
    s2d(val)
}

main(){
    print("Enter text: ");
    expStr : string = readUntil("\n");
    expAst = strToAst(expStr);
    simpleAst = simpleExp(expAst);

    print("STRING TO AST: ");
    println(expAst);

    println("AST TO STRING: " + astToStr(expAst));

    print("SIMPLIFIED AST: ");
    println(simpleAst);
    println("SIMPLIFIED EXP: " + astToStr(simpleAst));

    //value = evaluate(expAst);
    //println("VALUE = " + d2s(value));

    quit(0);
}

