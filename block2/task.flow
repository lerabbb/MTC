import lingo/pegcode/driver;
import math/math;
import material/material;
import mtk_labs/block2/simplifier;
import mtk_labs/block2/exps;      
import mtk_labs/block2/derivative;  
import mtk_labs/block2/rpn;

lingoGrammarOp : ref Maybe<[PegOp]> = ref None();
lingoGrammar(){
    onlyOnce(lingoGrammarOp, \ -> compilePegGrammar("#include mtk_labs/block2/grammar.lingo"));
}

strToAst(text : string) -> flow {
    parsic(lingoGrammar(), text, defaultPegActions)
}

astToStr(tree : flow) -> string{
    switch(tree : Exp){
        Sum(e1, e2): "(" + astToStr(e1) + "+" + astToStr(e2) + ")";
        Mul(e1, e2): "(" + astToStr(e1) + "*" + astToStr(e2) + ")";
        Int(i): i2s(i);
        Var(s): s;

        Pow(e1, e2): "(" + astToStr(e1) + "^" + astToStr(e2) + ")";
        Div(e1, e2): "(" + astToStr(e1) + "/" + astToStr(e2) + ")";
        Sub(e1, e2): "(" + astToStr(e1) + "-" + astToStr(e2) + ")";
        Double(d): d2s(d);
        Neg(e): "(-" + astToStr(e) + ")";
        Ln(e): "ln(" + astToStr(e) + ")";    
    }
}

evaluate(tree : flow) -> double{
    switch(tree){
        Sum(e1, e2): evaluate(e1) + evaluate(e2);
        Mul(e1, e2): evaluate(e1) * evaluate(e2);
        Int(i): i2d(i);
        Var(s): getValueForVar(s);

        Div(e1, e2): evaluate(e1) / evaluate(e2);
        Pow(e1, e2): dpow(evaluate(e1), evaluate(e2)); 
        Sub(e1, e2): evaluate(e1) - evaluate(e2); 
        Double(d): d;
        Neg(e): -evaluate(e);
        Ln(e): log(evaluate(e));
    }
}

getValueForVar(var : string) -> double{
    print("ENTER VALUE FOR " + var + ": ");
    val = readUntil("\n");
    s2d(val)
}

main(){
    print("Enter text: ");
    
    //5 task
    expStr : string = readUntil("\n"); 
    expAst = strToAst(expStr);
    print("STRING TO AST: "); 
    println(expAst); 

    //6 task
    //println("\nAST TO STRING: " + astToStr(expAst));

    //7 task
    //value = evaluate(expAst);
    //println("\nVALUE = " + d2s(value));

    //10 task
    simpleAst = simpleExp(expAst);
    print("\nSIMPLIFIED AST: ");
    println(simpleAst);
    println("SIMPLIFIED EXP: " + astToStr(simpleAst));

    //8 task 
    rpnString = expToRpn(simpleAst);
    normalExp = rpnToExp(rpnString);
    println("\nRPN EXP: " + rpnString);
    println("FROM RPN TO EXP: " + normalExp);

    //11 task;
    diffAst = derivative(simpleAst);
    simpleDifAst = simpleExp(diffAst);
    print("\nDERIVATIVE AST: ");
    println(simpleDifAst);
    println("DERIVATIVE STR: " + astToStr(simpleDifAst));

    quit(0);
}

