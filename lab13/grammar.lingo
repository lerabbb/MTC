programm = ws declaration*:d ws line*:l ws { Programm(:d, :l) };


//------operators----------

declaration = ws "VAR" ws char+$c ws ":" ws type:t ws ";" ws { Declare($c, :t) };
line = ws mark:m ws ":" ws operator:op ws { VmLine(:m, :op) };

operator = assign | condition | print;
print = ws "print" ws "(" ws exp:e ws ")" ws "goto" ws "{" ws mark*:ms ws "}" ws { Print(:e, :ms) };
assign = ws char+$v ws ":=" ws exp:e ws "goto" ws "{" ws mark*:ms ws "}" ws { Assign(Var($v), :e, :ms) };
condition = ws test:t ws "then" ws "{" ws mark*:ms1 ws "}" ws "else" ws "{" ws mark*:ms2 ws "}" ws { Condition(:t, :ms1, :ms2) };

test = ws "if" ws "(" ws exp:e1 ws rel_symb$op ws exp:e2 ws ")" ws { Test($op, :e1, :e2) };


//----------types----------

type = int | array;
int = "INT" ws { IntType() };
array = "(" ws type:t1 ws "ARRAY OF" ws type:t2 ws ")" { ArrayType(:t1, :t2) };



//----------expressions----------

exp = var | const | arithm_exp | app | upd ;

arithm_exp = ws "(" ws exp:e1 ws oper_symb$op ws exp:e2 ws ")" ws { ArithmOp($op, :e1, :e2) };
app = ws "APP" ws "("exp:arr "," exp:ind ")" ws { App(:arr, :ind) };
upd = ws "UPD" ws "(" ws exp:arr ws "," ws exp:ind ws "," ws exp:val ws ")" ws { Upd(:arr, :ind, :val) };
var = ws (char+)$c ws { Var($c) };
const = ws (digit+)$d ws { Const(s2i($d)) };




//----------auxilary definitions----------

mark = (digit+)$d ","? ws { Mark(s2i($d)) };

oper_symb = "+" | "-" | "*" | "/" | "%";
rel_symb = "<" | ">" | "<=" | ">=" | "==" | "!=";

digit = '0'-'9';
char = 'a' - 'z';
ws = s*;
s = " " | "\n" | "\t" | "\r";