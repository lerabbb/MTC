programm = ws declaration*:d ws operator*:op ws { Programm(:d, :op) };


//------operators----------

operator = assign | condition;

assign = mark:m ws ":" ws var:v ws ":=" exp:e "goto" ws "{" ws mark*:ms ws "}" ws { Assign(:m, :v, :e, :ms) };
condition = mark:m ws ":" ws test:t ws "then" ws "{" ws mark*:ms1 ws "}" ws "else" ws "{" ws mark*:ms2 ws "}" ws { Condition(:m, :t, :ms1, :ms2) };

test = ws "(" exp:e1 ws rel_symb$op ws operand:e2 ws ")" ws "?" ws { Test($op, :e1, :e2) };
declaration = ws "VAR" ws var:v ws ":" ws type:t ws ";" ws { Declare(:v, :t) };



//----------types----------

type = int | array;
int = "INT" ws { IntType() };
array = "(" ws type:t1 ws "ARRAY OF" ws type:t2 ws ")" { ArrayType(:t1, :t2) };



//----------expressions----------

exp = ws operand:a ws {:a} | arithm_exp | app | upd;

arithm_exp = ws "(" exp:e1 oper_symb$op exp:e2 ")" ws { ArithmOp($op, :e1, :e2) };
app = ws "APP" ws "(" exp:arr "," exp:ind ")" ws { App(:arr, :ind) };
upd = ws "UPD" ws "(" exp:arr "," exp:ind "," exp:val ")" ws { Upd(:arr, :ind, :val) };



//----------operations----------

oper_symb = "+" | "-" | "*" | "/";
rel_symb = "<" | ">" | "<=" | ">=" | "==" | "!=";



//----------operands----------

operand = var | const;
var = (char+ digit*) $c { Var($c) };
const = digit+ $d { Const(s2i($d)) };

mark = (digit+)$d { Mark(s2i($d)) };



//----------auxilary definitions----------

digit = '0'-'9';
char = 'a' - 'z' | 'A' - 'Z';
ws = s*;
s = " " | "\n" | "\t" | "\r";